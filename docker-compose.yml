services:
  server:
    build:
      context: ./server
      target: run-server
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hush-network
    healthcheck:
      test: ["CMD", "wget", "-q" ,"--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  client:
    build:
      context: ./client
    ports:
      - "3000:8080"
    environment:
      - NEXT_PUBLIC_WS_URL=ws://server:8080/ws 
    env_file:
      - .env
    depends_on:
      server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - hush-network
    healthcheck:
      test: ["CMD", "wget", "-q" ,"--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hush-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:

networks:
  hush-network:
    driver: bridge
